{"name": "Test dodawania produktu do koszyka", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"sc-15ih3hi-0 pvj85d-4 jSCQpQ\">...</button> is not clickable at point (1312, 335). Other element would receive the click: <div class=\"sc-1ooo14t-1 NbKFj\"></div>\n  (Session info: chrome=89.0.4389.82)", "trace": "self = <tests.add_to_cart_test.TestAddToCart object at 0x7f1e7b653cd0>, data = <utils.data.SearchData object at 0x7f1e7c29aa60>\n\n    @allure.title('Test dodawania produktu do koszyka')\n    @allure.description('Test sklepu komputerowego Xkom.pl')\n    @pytest.mark.parametrize('data', ExcelReader.search_data())\n    def test_add_item_to_cart(self, data):\n        cart_page = self.prepare_page()\n    \n        # 2. Kliknij w puste pole głównej wyszukiwarki sklepu.\n        cart_page.click_on_search_input()\n    \n        # 3. W polu wyszukiwarki wpisz wartość \"laptop\".\n        value = cart_page.type_proper_value(data.typed_value)\n        assert value == 'laptop'\n    \n        # 4. Wyszukaj pozadana wartosc naciskajac w submit button.\n        cart_page.submit_typed_value()\n        assert cart_page.is_submit_button_enabled() is True\n    \n        # (VERIFICATION) Ilość wyników wyszukiwania!!\n        cart_page.checkout_searched_value()\n    \n        # 5. Kolejno z listy produktów, wybierz element z dostępnym przyciskiem \"Dodaj do koszyka”.\n        cart_page.select_available_item()\n        assert cart_page.is_continuation_popup_displayed() is True\n    \n        # 6. Po wyświetleniu okna Popup kliknij w przycisk \"Przejdź do koszyka\".\n        cart_page.go_to_cart()\n    \n        # (VERIFICATION) Czy produkt został poprawnie dodany do koszyka.\n>       cart_page.check_cart_value()\n\nadd_to_cart_test.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/add_to_cart_page.py:114: in check_cart_value\n    go_delivery.click()\n../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1e7b3a3a90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ... NbKFj\\\\\">\\\\u003C/div>\\\\n  (Session info: chrome=89.0.4389.82)\",\"stacktrace\":\"#0 0x561dd530d2b9 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"sc-15ih3hi-0 pvj85d-4 jSCQpQ\">...</button> is not clickable at point (1312, 335). Other element would receive the click: <div class=\"sc-1ooo14t-1 NbKFj\"></div>\nE         (Session info: chrome=89.0.4389.82)\n\n../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException"}, "description": "Test sklepu komputerowego Xkom.pl", "steps": [{"name": "Kliknięcie w puste pole wyszukiwarki", "status": "passed", "attachments": [{"name": "click_on_search_input", "source": "db624ce6-1a10-43bd-a900-9c9715f54498-attachment.png", "type": "image/png"}], "start": 1621711266442, "stop": 1621711267171}, {"name": "Wpisana wartość w pole wyszukiwarki to \"'laptop'\"", "status": "passed", "attachments": [{"name": "type_proper_value", "source": "d09eec66-6eed-4fdb-ba41-8bb4e1680b75-attachment.png", "type": "image/png"}], "parameters": [{"name": "items_name", "value": "'laptop'"}], "start": 1621711267171, "stop": 1621711267624}, {"name": "Wyszukiwanie pożądanej wartości", "status": "passed", "attachments": [{"name": "submit_typed_value", "source": "ab3b7b52-5f6d-4daf-9874-251eead9b0b6-attachment.png", "type": "image/png"}], "start": 1621711267624, "stop": 1621711268588}, {"name": "Czy przycisk zatwierdzenia jest dostępny", "status": "passed", "attachments": [{"name": "is_submit_button_enabled", "source": "09695275-da58-4237-8a2c-0349e2b3bf87-attachment.png", "type": "image/png"}], "start": 1621711268588, "stop": 1621711269480}, {"name": "Weryfikacji znalezionych produktów o podanej wartości", "status": "passed", "attachments": [{"name": "checkout_searched_value", "source": "4ddb59d8-29ef-4433-9557-e1bbd652a5fb-attachment.png", "type": "image/png"}], "start": 1621711269480, "stop": 1621711279610}, {"name": "Wybranie danego produktu z listy", "status": "passed", "attachments": [{"name": "select_available_item", "source": "5392ceec-01b1-45cd-a2ee-702ef15f53c8-attachment.png", "type": "image/png"}], "start": 1621711279610, "stop": 1621711279957}, {"name": "Czy okno kontynuacji zakupu jest dostępne", "status": "passed", "attachments": [{"name": "is_continuation_popup_displayed", "source": "550d12a4-9c18-4146-8ba7-9158585f73c8-attachment.png", "type": "image/png"}], "start": 1621711279958, "stop": 1621711281519}, {"name": "Przejście do koszyka", "status": "passed", "attachments": [{"name": "go_to_cart", "source": "f7ad3e90-aed6-47ae-976b-e4fc2807f4aa-attachment.png", "type": "image/png"}], "start": 1621711281519, "stop": 1621711282438}, {"name": "Weryfikacja ilości produktów dodanych do koszyka", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"sc-15ih3hi-0 pvj85d-4 jSCQpQ\">...</button> is not clickable at point (1312, 335). Other element would receive the click: <div class=\"sc-1ooo14t-1 NbKFj\"></div>\n  (Session info: chrome=89.0.4389.82)\n\n", "trace": "  File \"/home/tester/.local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/tester/x_kom_pytest/pages/add_to_cart_page.py\", line 114, in check_cart_value\n    go_delivery.click()\n  File \"/home/tester/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/tester/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/tester/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/home/tester/.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1621711282438, "stop": 1621711283716}], "attachments": [{"name": "log", "source": "ad524067-67e4-4242-bf41-d359cf3593df-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "fc76de98-e8ab-4123-bc24-488c9a7b356b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "<utils.data.SearchData object at 0x7f1e7c29aa60>"}], "start": 1621711261131, "stop": 1621711283717, "uuid": "6104316a-7be4-4e36-9b78-7a692ae6472e", "historyId": "762718b1416e79d568c3de685c907eca", "testCaseId": "b30d849e60046527052d0cdceaf907cb", "fullName": "tests.add_to_cart_test.TestAddToCart#test_add_item_to_cart", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "add_to_cart_test"}, {"name": "subSuite", "value": "TestAddToCart"}, {"name": "host", "value": "tester-m"}, {"name": "thread", "value": "13497-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.add_to_cart_test"}]}